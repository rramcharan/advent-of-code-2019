using adventofcode2019_day11.Day11Part1;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Shouldly;

namespace adventofcode2019_day11Tests.Day11Part1
{
    [TestClass()]
    public class GravityAssistDay7Part2Tests
    {
        #region Examples day 7 part 2

        [TestMethod()]
        public void Example_Part1_01()
        {// Arrange
            var input = new int[]
            {
                3,26,1001,26,-4,26,3,27,1002,27,2,27,1,27,26,
                27,4,27,1001,28,-1,28,1005,28,6,99,0,0,5
            };

            // Act
            var result = AmplifierWithFeedbackLookController.RunSequenceOnAmplifiers(input, 9, 8, 7, 6, 5);

            // Arrange
            result.MaxThrusterSignal.ShouldBe(139629729);
        }

        [TestMethod()]
        public void Example_Part1_02()
        {// Arrange
            var input = new int[]
            {
                3,52,1001,52,-5,52,3,53,1,52,56,54,1007,54,5,55,1005,55,26,1001,54,
                -5,54,1105,1,12,1,53,54,53,1008,54,0,55,1001,55,1,55,2,53,55,53,4,
                53,1001,56,-1,56,1005,56,6,99,0,0,0,0,10
            };

            // Act
            var result = AmplifierWithFeedbackLookController.RunSequenceOnAmplifiers(input, 9, 7, 8, 5, 6);

            // Arrange
            result.MaxThrusterSignal.ShouldBe(18216);
        }




        #endregion

        #region Puzzle Day 7 Part 1

        [TestMethod()]
        public void Puzzle_Day7_Part2()
        {// Arrange
            var input = new int[]
            {
                3,8,1001,8,10,8,105,1,0,0,21,42,63,76,101,114,195,276,357,438,99999,3,9,101,2,9,9,102,5,9,9,1001,9,3,9,1002,9,5,9,4,9,99,3,9,101,4,9,9,102,5,9,9,1001,9,5,9,102,2,9,9,4,9,99,3,9,1001,9,3,9,1002,9,5,9,4,9,99,3,9,1002,9,2,9,101,5,9,9,102,3,9,9,101,2,9,9,1002,9,3,9,4,9,99,3,9,101,3,9,9,102,2,9,9,4,9,99,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,1,9,4,9,99,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,99,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,2,9,4,9,99,3,9,1001,9,1,9,4,9,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,99,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,99
            };

            // Act
            var result = AmplifierWithFeedbackLookController.RunSequenceOnAmplifiers(input, 9, 7, 8, 5, 6);

            // Arrange
            result.MaxThrusterSignal.ShouldBe(58285150);
        }

        #endregion
    }
}
